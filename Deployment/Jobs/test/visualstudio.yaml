parameters:
# Job Params
- name: job
  type: string
  default: FunctionalTest
- name: displayName
  type: string
  default: 'Run Functional Test'
- name: parallelStrategy
  type: number
  default: 1
- name: pool
  type: object
  default:
    name: 'Azure Pipelines'
    vmImage: 'windows-2019'
- name: condition
  type: string
  default: succeeded()
- name: container
  type: object
  default: ''
- name: dependsOn
  type: object
  default: []
- name: variables
  type: object
  default:
    NODE_TLS_REJECT_UNAUTHORIZED: 0
- name: checkout
  type: string
  default: self
# Use dotNet Type and Version
- name: dotNetType
  type: string
  default: 'sdk'
  values:
  - 'sdk'
  - 'runtime'
- name: dotNetVersion
  type: string
  default: '3.1.x'
# Download Artifact or dotNet restore/build 
- name: artifactName # artifactName or dotNetProjects required
  type: string
  default: ''
- name: dotNetProjects # artifactName or dotNetProjects required
  type: string
  default: ''
- name: dotNetBuildArguments
  type: string
  default: '--no-restore --configuration "Debug" --output $(Pipeline.Workspace)/Build'
- name: dotNetFeed
  type: string
  default: ''
# Get Azure KeyVault as Variables for Replace Tokens
- name: keyVaultName
  type: string
  default: ''
- name: keyVaultSubscription
  type: string
  default: ''
- name: keyVaultEnabled
  type: boolean
  default: false
- name: keyVaultSecretFilter
  type: string
  default: '*'
- name: replaceTokensRoot
  type: string
  default: '**/appsettings'
- name: replaceTokensTargets
  type: object
  default: |
    appsettings.*.json
- name: replaceTokensEnabled
  type: boolean
  default: true
# VSTest Task Params
- name: testSelector
  type: string
  default: testPlan
  values:
  - 'testPlan'
  - 'testAssemblies'
  - 'testRun'
- name: testPlan # Required if testSelector is testPlan
  type: string
  default: ''
- name: testSuite # Required if testSelector is testPlan
  type: string
  default: ''
- name: testConfiguration # Required if testSelector is testPlan
  type: string
  default: ''
- name: runInParallel
  type: boolean
  default: true
- name: testRunTitle
  type: string
  default: 'Functional Test'
- name: configuration
  type: string
  default: 'Debug'
- name: testDiagnosticsEnabled
  type: boolean
  default: true
- name: testCollectDumpOn
  type: string
  default: always
  values:
  - 'always'
  - 'onAbortOnly'
  - 'never'
- name: rerunFailedTests
  type: boolean
  default: true
- name: rerunMaxAttempts
  type: number
  default: 2
- name: testSearchFolder
  type: string
  default: $(Pipeline.Workspace)
- name: testResultsFolder
  type: string
  default: $(Agent.TempDirectory)\TestResults
- name: continueOnError
  type: boolean
  default: true
- name: vsTestVersion
  type: string
  default: toolsInstaller
- name: platform
  type: string
  default: 'Any CPU'
- name: distributionBatchType
  type: string
  default: basedOnTestCases
- name: batchingBasedOnAgentsOption
  type: string
  default: autoBatchSize
- name: preSteps
  type: stepList
  default: []
- name: postSteps
  type: stepList
  default: []

jobs:
- job: '${{ parameters.job }}'
  ${{ if gt(parameters.parallelStrategy, 1 ) }}:
    strategy:
      parallel: ${{ parameters.parallelStrategy }}
  displayName: '${{ parameters.displayName }}'
  ${{ if parameters.variables }}:
    variables: ${{ parameters.variables }}
  dependsOn: ${{ parameters.dependsOn }}
  pool: ${{ parameters.pool }}
  condition: ${{ parameters.condition }}
  ${{ if parameters.container }}:
    container: ${{ parameters.container }}
  steps:
  - ${{ if gt(length(parameters.preSteps), 0) }}:
    - ${{ parameters.preSteps }}
  - ${{ if and(parameters.artifactName, not(parameters.dotNetProjects)) }}:
    - checkout: none
    - download: current
      artifact: '${{ parameters.artifactName }}'
      displayName: 'Download dotNet Build Artifact'
  - ${{ if and(parameters.dotNetVersion, not(parameters.container)) }}:
    - task: UseDotNet@2
      displayName: 'Use DotNet Core ${{ parameters.dotNetType }} ${{ parameters.dotNetVersion }}'
      inputs:
        packageType: '${{ parameters.dotNetType }}'
        version: '${{ parameters.dotNetVersion }}'
  - ${{ if and(parameters.dotNetProjects, not(parameters.artifactName)) }}:
    - checkout: ${{ parameters.checkout }}
    - task: DotNetCoreCLI@2
      displayName: 'DotNet Restore ${{ parameters.dotNetProjects }}'
      inputs:
        command: restore
        projects: '${{ parameters.dotNetProjects }}'
        feedsToUse: 'select'
        vstsFeed: '${{ parameters.dotNetFeed }}'
        includeNuGetOrg: true
    - task: DotNetCoreCLI@2
      displayName: 'DotNet Build ${{ parameters.dotNetProjects }}'
      inputs:
        command: build
        projects: '${{ parameters.dotNetProjects }}'
        arguments: '${{ parameters.dotNetBuildArguments }}'
  - ${{ if parameters.keyVaultName }}:
    - task: AzureKeyVault@1
      displayName: 'Get Azure Key Vault ${{ parameters.keyVaultName }}'
      inputs:
        azureSubscription: '${{ parameters.keyVaultSubscription }}'
        KeyVaultName: '${{ parameters.keyVaultName }}'
        SecretsFilter: '${{ parameters.keyVaultSecretFilter }}'
  - task: replacetokens@3
    displayName: 'Replace tokens in ${{ parameters.replaceTokensRoot }}'
    enabled: '${{ parameters.replaceTokensEnabled }}'
    inputs:
      rootDirectory: '${{ parameters.replaceTokensRoot }}'
      targetFiles: ${{ parameters.replaceTokensTargets }}
      encoding: 'auto'
      writeBOM: true
      actionOnMissing: 'warn'
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'
      useLegacyPattern: false
      enableTelemetry: false
      verbosity: 'detailed'
  - task: VisualStudioTestPlatformInstaller@1
    displayName: 'Visual Studio Test Platform Installer'
  - task: VSTest@2
    displayName: '${{ parameters.displayName }}'
    inputs:
      distributionBatchType: '${{ parameters.distributionBatchType }}'
      batchingBasedOnAgentsOption: '${{ parameters.batchingBasedOnAgentsOption }}'
      testSelector: '${{ parameters.testSelector }}'
      ${{ if eq(parameters.testSelector, 'testPlan') }}:
        testPlan: '${{ parameters.testPlan }}'
        testSuite: '${{ parameters.testSuite }}'
        testConfiguration: '${{ parameters.testConfiguration }}'
      vsTestVersion: '${{ parameters.vsTestVersion }}'
      runInParallel: '${{ parameters.runInParallel }}'
      testRunTitle: '${{ parameters.testRunTitle }}'
      platform: '${{ parameters.platform }}'
      configuration: '${{ parameters.configuration }}'
      diagnosticsEnabled: '${{ parameters.testDiagnosticsEnabled }}'
      collectDumpOn: '${{ parameters.testCollectDumpOn }}'
      rerunFailedTests: '${{ parameters.rerunFailedTests }}'
      rerunMaxAttempts: '${{ parameters.rerunMaxAttempts }}'
      searchFolder: '${{ parameters.testSearchFolder }}'
      resultsFolder: '${{ parameters.testResultsFolder }}'
    continueOnError: '${{ parameters.continueOnError }}'
  - ${{ if gt(length(parameters.postSteps), 0) }}:
    - ${{ parameters.postSteps }}
  - task: PostBuildCleanup@3
    displayName: 'Clean Agent Directories'